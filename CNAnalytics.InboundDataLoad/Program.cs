using System;
using System.IO;
using System.Diagnostics;
using System.Configuration;
using System.Net.Mail;

namespace CNAnalytics.InboundDataLoad
{

    class Program
    {

        static string source = "CNAnalyticsInboundDataLoad";
        static void Main(string[] args)
        {
            ProcessStartInfo start = new ProcessStartInfo();
            //python interpreter location
            start.FileName = ConfigurationManager.AppSettings["PythonInterprterLocation"];
            start.Arguments = ConfigurationManager.AppSettings["ScriptLocation"];
            start.UseShellExecute = false; // Do not use OS shell
            start.CreateNoWindow = true;
            start.RedirectStandardOutput = true; // Any output, generated by application will be redirected back
            start.RedirectStandardError = true; // Any error in standard output will be redirected back (for example exceptions)
            start.LoadUserProfile = true;
            using (Process process = Process.Start(start))
            {
                using (StreamReader reader = process.StandardOutput)
                {
                    string stderr = process.StandardError.ReadToEnd(); // Here are the exceptions from our Python script
                    if (!string.IsNullOrEmpty(stderr))
                    {
                        LogError(stderr);
                        SendEmail(stderr);
                    }
                    else
                    {
                        string result = reader.ReadToEnd();
                        LogEvent(result); // Here is the result of StdOut(for example: print "test"), for any logging this var can be used
                    }
                }
            }
        }

        #region EventLogging
        private static void LogEvent(string log)
        {
            EventLog systemEventLog = new EventLog("Application");
            if (!EventLog.SourceExists(source))
            {
                EventLog.CreateEventSource(source, "Application");
            }
            systemEventLog.Source = source;
            systemEventLog.WriteEntry(log, EventLogEntryType.Information);
        }
        private static void LogError(string error)
        {
            EventLog systemEventLog = new EventLog("Application");
            if (!EventLog.SourceExists(source))
            {
                EventLog.CreateEventSource(source, "Application");
            }
            systemEventLog.Source = source;
            systemEventLog.WriteEntry(error, EventLogEntryType.Error);
        }
        #endregion

        #region EmailHelper
        private static void SendEmail(string emailbody)
        {
            try
            {
                MailMessage message = new MailMessage();
                SmtpClient smtp = new SmtpClient();
                message.From = new MailAddress(ConfigurationManager.AppSettings["FromEmail"]);
                string toEmails = ConfigurationManager.AppSettings["ToEmail"];
                foreach (var address in toEmails.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                {
                    message.To.Add(new MailAddress(address));
                }
                string ccEmails = ConfigurationManager.AppSettings["CCEmail"];
                foreach (var address in ccEmails.Split(new[] { ";" }, StringSplitOptions.RemoveEmptyEntries))
                {
                    message.CC.Add(new MailAddress(address));
                }
                message.Subject = ConfigurationManager.AppSettings["EmailSubject"];
                message.IsBodyHtml = true;
                message.Body = emailbody;
                smtp.Port = Convert.ToInt32(ConfigurationManager.AppSettings["SMTPPort"]);
                smtp.Host = ConfigurationManager.AppSettings["SMTPServer"];
                smtp.UseDefaultCredentials = true;
                smtp.DeliveryMethod = SmtpDeliveryMethod.Network;
                smtp.Send(message);
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
        #endregion

    }
}
